unqdates <- sort(unique(mae_comparison_data$target_end_date))
dd1 <- NULL
for(i in 1:length(unqdates)){
print(i)
## aggregate up to the model level
tempdfm <- data.table(mae_comparison_data)[target_end_date <= unqdates[i],
list(n_total_submissions = length(abs_error_smoa),
bestinclass = bestinclass[1],
## MAE
competitor = mean(abs_error_model[!is.na(abs_error_model)], na.rm=T),
smoa = mean(abs_error_smoa[!is.na(abs_error_model)],na.rm=T)),by=c("model")]
tempdfm$winner <- "sMOA"
tempdfm[tempdfm$competitor < tempdfm$smoa,]$winner <- "competitor"
tempdfm$metric <- "MAE"
dd1m <- data.frame(metric = "MAE",
last_date = unqdates[i],
# us_cases = unique(subset(mae_comparison_data, location_name == "United States" & target_end_date == unqdates[i])$true_values),
n_models = nrow(tempdfm),
n_bestinclass_models = nrow(tempdfm[tempdfm$bestinclass == "yes",]),
total_submissions = sum(tempdfm$n_total_submissions),
prop_of_models_smoa_beats = mean(tempdfm$winner == "sMOA"),
prop_of_bestinclass_models_smoa_beats = mean(tempdfm[tempdfm$bestinclass == "yes",]$winner == "sMOA"))
## aggregate up to the model level
tempdfw <- data.table(wis_comparison_data)[target_end_date <= unqdates[i],
list(n_total_submissions = length(wis_error_smoa),
bestinclass = bestinclass[1],
## MAE
competitor = mean(wis_error_model[!is.na(wis_error_model)], na.rm=T),
smoa = mean(wis_error_smoa[!is.na(wis_error_model)],na.rm=T)),by=c("model")]
tempdfw$winner <- "sMOA"
tempdfw[tempdfw$competitor < tempdfw$smoa,]$winner <- "competitor"
tempdfw$metric <- "WIS"
dd1w <- data.frame(metric = "WIS",
last_date = unqdates[i],
# us_cases = unique(subset(mae_comparison_data, location_name == "United States" & target_end_date == unqdates[i])$true_values),
n_models = nrow(tempdfw),
n_bestinclass_models = nrow(tempdfw[tempdfw$bestinclass == "yes",]),
total_submissions = sum(tempdfw$n_total_submissions),
prop_of_models_smoa_beats = mean(tempdfw$winner == "sMOA"),
prop_of_bestinclass_models_smoa_beats = mean(tempdfw[tempdfw$bestinclass == "yes",]$winner == "sMOA"))
dd1 <- rbind(dd1,dd1m, dd1w)
}
####################################################
### Figure 6
namelabeldf <- data.frame(x = ymd("2022-11-01"),
y = c(.4, .85),
mylabel = c("Best-in-class Models","All Models"))
png(paste0(savepath,"proportion_of_models_smoa_beats_by_date.png"), height = 5*300, width =10*300, res=300)
ggplot(data=dd1, aes(x=last_date))+
geom_hline(aes(yintercept = .5), linetype=I(1),color=I("grey"))+
geom_line(aes(y=prop_of_models_smoa_beats))+
geom_point(aes(y=prop_of_models_smoa_beats),size=I(2), fill = I("black"), shape=I(21))+
geom_line(aes(y=prop_of_bestinclass_models_smoa_beats), color=I("red"))+
geom_point(aes(y=prop_of_bestinclass_models_smoa_beats),size=I(2), fill = I("red"), color=I("black"), shape=I(21))+
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))+
xlab("")+
geom_text(aes(x = x, y=y, label=mylabel), data=subset(namelabeldf,mylabel == "Best-in-class Models"), color=I("red"))+
geom_text(aes(x = x, y=y, label=mylabel), data=subset(namelabeldf,mylabel == "All Models"), color=I("black"))+
facet_wrap(~metric,ncol=1)+
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,.2))+
ylab("Proportion of Models sMOA outperforms")+
ggtitle("The proportion of all models (black) and best-in-class models (red)\nsMOA outperforms if validation is stopped on the x-axis date")+
scale_x_date(date_breaks = "3 months", date_labels = "%b %Y")
dev.off()
####################################################
### Figure 7
temp_valid = validdf %>% select("target_end_date", "location_name", "value") %>% subset(location_name == "United States")
temp_valid$last_date <- as.Date(temp_valid$target_end_date)
temp_valid$us_cases <- temp_valid$value
dd1_tmp <- dd1 %>% left_join(temp_valid, by = c('last_date'))
png(paste0(savepath,"proportion_of_best_in_class_models_smoa_beats_by_date_all_models.png"), height = 4*300, width =10*300, res=300)
ggplot(data=subset(dd1_tmp,metric=="MAE"), aes(x=last_date))+
geom_point(aes(y=us_cases, fill=prop_of_bestinclass_models_smoa_beats),size=I(2), color = I("black"), shape=I(21))+
scale_fill_gradient2(midpoint=.5, limits=c(0,1),name = "Proportion of Best-in-Class Models sMOA Outperforms in MAE")+
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))+
xlab("")+
ylab("US Cases")+
ggtitle("The proportion of best-in-class models sMOA outperforms if validation is stopped on the x-axis date")+
scale_x_date(date_breaks = "3 months", date_labels = "%b %Y")
dev.off()
########################################################
## Figure 8
## show an example for california
mystate <- "California"
mycompmod <- "USC-SI_kJalpha"
comp8 <- subset(mae_comparison_data,forecast_date == "2021-11-22" & location_name == mystate) #, select=c("forecast_date", "forecasts","target_end_date","location_name","horizon","value","abs_error_smoa","abs_error_model")
# comp8$fcstover_smoa <- comp8$value + comp8$abs_error_smoa
# comp8 <- subset(comp8, select = c("forecast_date","target_end_date","location_name","horizon","value","abs_error_smoa","fcstover_smoa","abs_error_model"))
png(paste0(savepath,mystate,"_trough_example.png"), height = 4*300, width =12*300, res=300)
ggplot()+
geom_line(aes(x=target_end_date, y=value), size=I(1), data=subset(mae_comparison_data, location_name == mystate & target_end_date <= ymd("2021-11-20") & horizon==1))+
geom_point(aes(x=target_end_date, y=value),shape=I(21), size=I(3),fill=I("grey"), color=I("black"),data=subset(mae_comparison_data, location_name == mystate & target_end_date <= ymd("2022-3-31") & horizon==1))+
ylab("Weekly Cases")+
xlab("")+
scale_x_date(date_breaks = "3 months", date_labels = "%b %Y") +
geom_vline(aes(xintercept = ymd("2021-11-24")), linetype=I(2))+
geom_vline(aes(xintercept = ymd("2021-12-22")), linetype=I(2))+
geom_line(aes(x=target_end_date, y=forecasts), color=I("red"), data=comp8, linewidth=I(1))+
ggtitle(mystate)+
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))
dd1_tmp <- dd1 %>% left_join(temp_valid, by = c('last_date'))
dd1_tmp
head(dd1_tmp)
ggplot(data=subset(dd1_tmp,metric=="MAE"), aes(x=last_date))+
geom_point(aes(y=us_cases, fill=prop_of_bestinclass_models_smoa_beats),size=I(2), color = I("black"), shape=I(21))+
scale_fill_gradient2(midpoint=.5, limits=c(0,1),name = "Proportion of Best-in-Class Models sMOA Outperforms in MAE")+
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))+
xlab("")+
ylab("US Cases")+
ggtitle("The proportion of best-in-class models sMOA outperforms if validation is stopped on the x-axis date")+
scale_x_date(date_breaks = "3 months", date_labels = "%b %Y")
########################################################
## Figure 8
## show an example for california
mystate <- "California"
mycompmod <- "USC-SI_kJalpha"
comp8 <- subset(mae_comparison_data,forecast_date == "2021-11-22" & location_name == mystate) #, select=c("forecast_date", "forecasts","target_end_date","location_name","horizon","value","abs_error_smoa","abs_error_model")
ggplot()+
geom_line(aes(x=target_end_date, y=value), size=I(1), data=subset(mae_comparison_data, location_name == mystate & target_end_date <= ymd("2021-11-20") & horizon==1))+
geom_point(aes(x=target_end_date, y=value),shape=I(21), size=I(3),fill=I("grey"), color=I("black"),data=subset(mae_comparison_data, location_name == mystate & target_end_date <= ymd("2022-3-31") & horizon==1))+
ylab("Weekly Cases")+
xlab("")+
scale_x_date(date_breaks = "3 months", date_labels = "%b %Y") +
geom_vline(aes(xintercept = ymd("2021-11-24")), linetype=I(2))+
geom_vline(aes(xintercept = ymd("2021-12-22")), linetype=I(2))+
geom_line(aes(x=target_end_date, y=forecasts), color=I("red"), data=comp8, linewidth=I(1))+
ggtitle(mystate)+
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))
dev.off()
ggplot(data=subset(dd1_tmp,metric=="MAE"), aes(x=last_date))+
geom_point(aes(y=us_cases, fill=prop_of_bestinclass_models_smoa_beats),size=I(2), color = I("black"), shape=I(21))+
scale_fill_gradient2(midpoint=.5, limits=c(0,1),name = "Proportion of Best-in-Class Models sMOA Outperforms in MAE")+
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))+
xlab("")+
ylab("US Cases")+
ggtitle("The proportion of best-in-class models sMOA outperforms if validation is stopped on the x-axis date")+
scale_x_date(date_breaks = "3 months", date_labels = "%b %Y")
ggplot()+
geom_line(aes(x=target_end_date, y=value), size=I(1), data=subset(mae_comparison_data, location_name == mystate & target_end_date <= ymd("2021-11-20") & horizon==1))+
geom_point(aes(x=target_end_date, y=value),shape=I(21), size=I(3),fill=I("grey"), color=I("black"),data=subset(mae_comparison_data, location_name == mystate & target_end_date <= ymd("2022-3-31") & horizon==1))+
ylab("Weekly Cases")+
xlab("")+
scale_x_date(date_breaks = "3 months", date_labels = "%b %Y") +
geom_vline(aes(xintercept = ymd("2021-11-24")), linetype=I(2))+
geom_vline(aes(xintercept = ymd("2021-12-22")), linetype=I(2))+
geom_line(aes(x=target_end_date, y=forecasts), color=I("red"), data=comp8, linewidth=I(1))+
ggtitle(mystate)+
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))
head(mae_comparison_data)
head(curr_data)
curr_data = read.csv(paste0("data/truncations_by_loc/", file_name)) %>% left_join(temp_valid, by = c('date'))
validdf <- data.table::fread(paste0(trainpath,"validationdata_2023-12-31.csv"))
validdf <- subset(validdf, target_variable == "inc case")
temp_valid = validdf %>% select("target_end_date", "location_name", "value") %>% subset(location_name == "United States")
temp_valid$date <- as.Date(temp_valid$target_end_date)
temp_valid$us_cases <- temp_valid$value
curr_data = read.csv(paste0("data/truncations_by_loc/", file_name)) %>% left_join(temp_valid, by = c('date'))
curr_data = read.csv(paste0("data/truncations_by_loc/", file_name))
curr_data$date = as.Date(curr_date$date)
curr_date = curr_data %>% left_join(temp_valid, by = c('date'))
curr_data$date = as.Date(curr_date$date)
curr_data = read.csv(paste0("data/truncations_by_loc/", file_name))
curr_data$date = as.Date(curr_date$date)
curr_data = read.csv(paste0("data/truncations_by_loc/", file_name))
curr_data$date = as.Date(curr_data$date)
curr_date = curr_data %>% left_join(temp_valid, by = c('date'))
ggplot(curr_data, aes(x = date, y = truncation_values, group = 1)) +
geom_line() + theme_bw() + ggtitle(file_name)
ggplot(curr_data, aes(x = date, y = truncation_values, color = us_cases)) +
geom_point() + theme_bw() + ggtitle(file_name)
curr_data
curr_date = curr_data %>% left_join(temp_valid, by = c('date'))
curr_data = curr_data %>% left_join(temp_valid, by = c('date'))
ggplot(curr_data, aes(x = date, y = truncation_values, color = us_cases)) +
geom_point() + theme_bw() + ggtitle(file_name)
ggplot(curr_data, aes(x = date, y = truncation_values, color = us_cases)) +
geom_point(size = I(2)) + theme_bw() + ggtitle(file_name)
ggplot(curr_data, aes(x = date, color = truncation_values, y = us_cases)) +
geom_point(size = I(2)) + theme_bw() + ggtitle(file_name)
state_name = strsplit(file_name, split = "\.")
state_name = strsplit(file_name, split = ".")
state_name
state_name = strsplit(file_name, split = "\\.")
state_name
unlist(strsplit(file_name, split = "\\."))[1]
mae_subset = subset(mae_comparison_data, location == state_name)
state_name = unlist(strsplit(file_name, split = "\\."))[1]
mae_subset = subset(mae_comparison_data, location == state_name)
mae_subset
mae_comparison_data
mae_subset = subset(mae_comparison_data, location_name == state_name)
mae_subset$date = as.Date(mae_subset$target_end_date)
curr_data = curr_data %>% left_join(mae_subset, by = c('date'))
ggplot(curr_data, aes(x = date, color = truncation_values, y = us_cases)) +
geom_point(size = I(2)) + theme_bw() + ggtitle(file_name)
ggplot(curr_data, aes(x = date, color = truncation_values, y = true_values)) +
geom_point(size = I(2)) + theme_bw() + ggtitle(file_name)
ggarrange(p1, p2, layout.matrix = matrix(1:2))
library(gridExtra)
ggarrange(p1, p2, layout.matrix = matrix(1:2))
library(ggExtra)
ggarrange(p1, p2, layout.matrix = matrix(1:2))
grid.arrange(p1, p2, layout.matrix = matrix(1:2))
p1 = ggplot(curr_data, aes(x = date, color = truncation_values, y = us_cases)) +
geom_point(size = I(2)) + theme_bw() + ggtitle(file_name)
p2 = ggplot(curr_data, aes(x = date, color = truncation_values, y = true_values)) +
geom_point(size = I(2)) + theme_bw() + ggtitle(file_name)
grid.arrange(p1, p2, layout.matrix = matrix(1:2))
lst_p = list(p1, p2)
grid.arrange(lst_p[[1]], lst_p[[2]])
file_name = 'California'
state_name = unlist(strsplit(file_name, split = "\\."))[1]
curr_data = read.csv(paste0("data/truncations_by_loc/", file_name))
file_name = 'California.csv'
state_name = unlist(strsplit(file_name, split = "\\."))[1]
curr_data = read.csv(paste0("data/truncations_by_loc/", file_name))
curr_data$date = as.Date(curr_data$date)
curr_data = curr_data %>% left_join(temp_valid, by = c('date'))
mae_subset = subset(mae_comparison_data, location_name == state_name) %>%
select("target_end_date", "true_values")
mae_subset$date = as.Date(mae_subset$target_end_date)
curr_data = curr_data %>% left_join(mae_subset, by = c('date'))
p1 = ggplot(curr_data, aes(x = date, color = truncation_values, y = us_cases)) +
geom_point(size = I(2)) + theme_bw() + ggtitle(paste0(file_name, " us cases"))
p2 = ggplot(curr_data, aes(x = date, color = truncation_values, y = true_values)) +
geom_point(size = I(2)) + theme_bw() + ggtitle(paste0(file_name, " state cases"))
lst_p = list(p1, p2)
grid.arrange(lst_p[[1]], lst_p[[2]])
ggplot(curr_data, aes(x = date, y = truncation_values, group = 1)) +
geom_line() + theme_bw() + ggtitle(paste0(file_name, " us cases"))
?guide_legend
library(ggplot2)
?guide_legend
knitr::opts_chunk$set(
echo = FALSE, message=FALSE, warnings=FALSE, fig.pos = "h!", fig.height=6.5
)
include_intro <- TRUE
include_methods <- FALSE # if false, data descrip runs instead
include_analysis <- TRUE
include_summary <- TRUE
include_appendA <- TRUE
include_remainderplots <- TRUE
library(tidyverse)
library(readxl)
library(knitr)
library(ggnewscale)
library(NADA)
library(lubridate)
library(stringr)
library(kableExtra)
library(ggpattern)
library(pals)
# source helper functions
# file.sources = list.files(path='~/git/analytical-chemistry/exchange\ reports/R', pattern='*.R', full.names=TRUE, ignore.case=TRUE)
file.sources = list.files(path='../../R', pattern='*.R', full.names=TRUE, ignore.case=TRUE)
sapply(file.sources, source)
filename <- "2024.06.05 Metal 442_Data Set for Statisticians.xlsx"
datafile <- paste0("../data/",filename)
sheetnames <- datafile %>% excel_sheets()
metal <- "Metal 442"
n.boots=1000
sh.range <- cell_cols("A:K")
sh.coltypes <- c("text","date","text","text","text","text","numeric","text","text","text","skip")
#sh.nacodes <- c("LLD","NR","-","no 241Pu","no 238Pu","SRNL-22E-1","SRNL-22E-2")
# full list of NA codes: c("D", "-","","NA", "NA = Not Analyzed","NR","NR = Not Reported","n/d","no 241Pu","no 238Pu")
# Note: AppendA depends on results being in 7th column
DAT.full <- tibble()
for(sh in sheetnames){
el <- read_excel(datafile, sheet=sh, range = sh.range, col_types=sh.coltypes)
# el <- read_excel(datafile, sheet=sh, range = sh.range, col_types=sh.coltypes, na=sh.nacodes)
colnames(el)[is.element(colnames(el), c("Not Round", "Measured Result", "Reported Result", "Corrected Result", "Decay Corrected Result","Decay Corrected Measured Result","Normalized, Decay Corrected Measured Result","Normalized/Decay Corrected Measured Result"))] <- "Results"
el$Analyte = str_split_fixed(sh," ",n=3)[,1]
DAT.full <- rbind(DAT.full, el)
}
# NO NAs in metal 442
DAT <- DAT.full %>% filter(!is.na(Results)) # remove records where results value is missing
# check for mismatch in analyte between spreadsheet name and recorded data
# DAT %>% filter(str_starts(DAT$Analyte,DAT$Element,  negate=TRUE))
DAT$Element[DAT$Analyte=="Zr"] <- "Zr"
## In Al, 2022 SRNL has miscoded dates. Overwrite as 2022.
# DAT$`Exchange Date`[is.na(DAT$`Exchange Date`) & DAT$Lab=="SRNL"] <- as.POSIXct("2022-01-01")
## If analyzing subset of analytes, filter DAT here
analytes.list <- unique(DAT$Analyte)
#analytes.list <- analytes.list[!is.element(analytes.list, c("H","N"))] ## which to run
nms <- DAT$`Method Code` %>% unique()
nms
matrix(1:25, nrow = 5)
?matrix
# Create traceplots (not formally) on the proton data themselves
## Author: Alexander C. Murph
## Date: Jan 2024
library(reticulate)
library(changepoint)
library(ggplot2)
library(reshape2)
library(zoo)
library(ggExtra)
library(gridExtra)
library(grid)
library(tidyverse)
args <- commandArgs(trailingOnly = TRUE)
# Assign values
goes_date <- args[1]
goes_date
goes_date = 'oct2024'
# Specify the path to the pickle file/vast/home/murph/GitLab/vela-rampart/protons_to_neutrons/oct2024/data_logs
pickle_file <- paste0("~/GitLab/vela-rampart/protons_to_neutrons/", goes_date, "/data_logs/goes16_sgps_1minavg_", goes_date, "sep.csv")
proton_data <- as_tibble(read.csv(pickle_file))
proton_data$Timestamp <- as.POSIXct(proton_data$Timestamp, format = "%Y-%m-%d %H:%M:%S")
names(proton_data) <- gsub('X', '', names(proton_data))
changepoint_data = data.frame(energy_band = names(proton_data)[-1],
TimeIndex_lower = NA,
TimeIndex_upper = NA)
# Let's graph these timestamps
changepoints <- cpts(cpt.meanvar(na.locf(proton_data$`1.02`), method='BinSeg', Q = 2))
proton_data
names(proton_data)
energy_values = names(proton_data)[2:ncol(proton_data)]
energy_values
energy_values = as.numeric(names(proton_data)[2:ncol(proton_data)])
energy_values
energy_val = "1.38"
# Let's graph these timestamps
changepoints <- cpts(cpt.meanvar(na.locf(proton_data %>% select(energy_val)), method='BinSeg', Q = 2))
energy_val
energy_val
p1 <- ggplot(proton_data, aes(x = Timestamp, y = var(all_of(energy_val)))) + geom_line()+
geom_vline(xintercept = c(proton_data$Timestamp[changepoints[1]],
proton_data$Timestamp[changepoints[2]])) +  # Add axis labels
theme(
axis.title = element_text(size = 20),        # Increase size of axis titles
axis.text = element_text(size = 14)          # Increase size of axis tick labels
)
# Let's graph these timestamps
changepoints <- cpts(cpt.meanvar(na.locf(proton_data %>% select(all_of(energy_val))), method='BinSeg', Q = 2))
proton_data %>% select(all_of(energy_val))
?cpt.meanvar
unlist(proton_data %>% select(all_of(energy_val)))
# Let's graph these timestamps
changepoints <- cpts(cpt.meanvar(na.locf(unlist(proton_data %>% select(all_of(energy_val)))), method='BinSeg', Q = 2))
if(length(changepoints) == 0){
# No changepoint, meaning all observed data are background noise.
changepoints = c(1,1)
}
p1 <- ggplot(proton_data, aes(x = Timestamp, y = var(energy_val))) + geom_line()+
geom_vline(xintercept = c(proton_data$Timestamp[changepoints[1]],
proton_data$Timestamp[changepoints[2]])) +  # Add axis labels
theme(
axis.title = element_text(size = 20),        # Increase size of axis titles
axis.text = element_text(size = 14)          # Increase size of axis tick labels
)
p1
changepoints
proton_data
p1 <- ggplot(proton_data, aes(x = Timestamp, y = aes_string(energy_val))) + geom_line()+
geom_vline(xintercept = c(proton_data$Timestamp[changepoints[1]],
proton_data$Timestamp[changepoints[2]])) +  # Add axis labels
theme(
axis.title = element_text(size = 20),        # Increase size of axis titles
axis.text = element_text(size = 14)          # Increase size of axis tick labels
)
p1
p1 <- ggplot(proton_data, aes(x = Timestamp, y = aes(energy_val))) + geom_line()+
geom_vline(xintercept = c(proton_data$Timestamp[changepoints[1]],
proton_data$Timestamp[changepoints[2]])) +  # Add axis labels
theme(
axis.title = element_text(size = 20),        # Increase size of axis titles
axis.text = element_text(size = 14)          # Increase size of axis tick labels
)
p1
energy_val
p1 <- ggplot(proton_data, aes_string(x = Timestamp, y = energy_val)) + geom_line()+
geom_vline(xintercept = c(proton_data$Timestamp[changepoints[1]],
proton_data$Timestamp[changepoints[2]])) +  # Add axis labels
theme(
axis.title = element_text(size = 20),        # Increase size of axis titles
axis.text = element_text(size = 14)          # Increase size of axis tick labels
)
p1 <- ggplot(proton_data, aes_string(x = "Timestamp", y = energy_val)) + geom_line()+
geom_vline(xintercept = c(proton_data$Timestamp[changepoints[1]],
proton_data$Timestamp[changepoints[2]])) +  # Add axis labels
theme(
axis.title = element_text(size = 20),        # Increase size of axis titles
axis.text = element_text(size = 14)          # Increase size of axis tick labels
)
p1
p1 <- ggplot(proton_data, aes_string(x = "Timestamp", y = !!sym(energy_val))) + geom_line()+
geom_vline(xintercept = c(proton_data$Timestamp[changepoints[1]],
proton_data$Timestamp[changepoints[2]])) +  # Add axis labels
theme(
axis.title = element_text(size = 20),        # Increase size of axis titles
axis.text = element_text(size = 14)          # Increase size of axis tick labels
)
p1 <- ggplot(proton_data, aes(x = Timestamp, y = !!sym(energy_val))) + geom_line()+
geom_vline(xintercept = c(proton_data$Timestamp[changepoints[1]],
proton_data$Timestamp[changepoints[2]])) +  # Add axis labels
theme(
axis.title = element_text(size = 20),        # Increase size of axis titles
axis.text = element_text(size = 14)          # Increase size of axis tick labels
)
p1
energy_values = names(proton_data)[2:ncol(proton_data)]
energy_count = 1
plot_list = list()
for(energy_val in energy_values){
# Let's graph these timestamps
changepoints <- cpts(cpt.meanvar(na.locf(unlist(proton_data %>% select(all_of(energy_val)))), method='BinSeg', Q = 2))
if(length(changepoints) == 0){
# No changepoint, meaning all observed data are background noise.
changepoints = c(1,1)
}
p1 <- ggplot(proton_data, aes(x = Timestamp, y = !!sym(energy_val))) + geom_line()+
geom_vline(xintercept = c(proton_data$Timestamp[changepoints[1]],
proton_data$Timestamp[changepoints[2]])) +  # Add axis labels
theme(
axis.title = element_text(size = 20),        # Increase size of axis titles
axis.text = element_text(size = 14)          # Increase size of axis tick labels
)
plot_list[[energy_count]] = p1
changepoint_data[energy_count,2] = as.character(proton_data$Timestamp[changepoints[1]])
changepoint_data[energy_count,3] = as.character(proton_data$Timestamp[changepoints[2]])
}
energy_values = names(proton_data)[2:ncol(proton_data)]
energy_count = 1
plot_list = list()
for(energy_val in energy_values){
# Let's graph these timestamps
changepoints <- cpts(cpt.meanvar(na.locf(unlist(proton_data %>% select(all_of(energy_val)))), method='BinSeg', Q = 2))
if(length(changepoints) == 0){
# No changepoint, meaning all observed data are background noise.
changepoints = c(1,1)
}
p1 <- ggplot(proton_data, aes(x = Timestamp, y = !!sym(energy_val))) + geom_line()+
geom_vline(xintercept = c(proton_data$Timestamp[changepoints[1]],
proton_data$Timestamp[changepoints[2]])) +  # Add axis labels
theme(
axis.title = element_text(size = 20),        # Increase size of axis titles
axis.text = element_text(size = 14)          # Increase size of axis tick labels
)
plot_list[[energy_count]] = p1
changepoint_data[energy_count,2] = as.character(proton_data$Timestamp[changepoints[1]])
changepoint_data[energy_count,3] = as.character(proton_data$Timestamp[changepoints[2]])
energy_count = energy_count + 1
}
warnings()
grid.arrange(plot_list[[1]], plot_list[[2]],plot_list[[1]],plot_list[[1]],
plot_list[[5]],plot_list[[6]],plot_list[[7]],plot_list[[18]],
plot_list[[9]],plot_list[[10]],plot_list[[11]],plot_list[[12]],
plot_list[[13]],plot_list[[14]],
layout_matrix = matrix(1:14, byrow = TRUE, ncol=2))
grid.arrange(plot_list[[1]], plot_list[[2]],plot_list[[1]],plot_list[[1]],
plot_list[[5]],plot_list[[6]],plot_list[[7]],plot_list[[8]],
plot_list[[9]],plot_list[[10]],plot_list[[11]],plot_list[[12]],
plot_list[[13]],plot_list[[14]],
layout_matrix = matrix(1:14, byrow = TRUE, ncol=2))
energy_count
length(energy_values)
grid.arrange(plot_list[[1]], plot_list[[2]],plot_list[[1]],plot_list[[1]],
plot_list[[5]],plot_list[[6]],plot_list[[7]],plot_list[[8]],
plot_list[[9]],plot_list[[10]],plot_list[[11]],plot_list[[12]],
plot_list[[13]],
layout_matrix = matrix(1:13, byrow = TRUE, ncol=2))
dev.off()
grid.arrange(plot_list[[1]], plot_list[[2]],plot_list[[1]],plot_list[[1]],
plot_list[[5]],plot_list[[6]],plot_list[[7]],plot_list[[8]],
plot_list[[9]],plot_list[[10]],plot_list[[11]],plot_list[[12]],
plot_list[[13]],
layout_matrix = matrix(1:13, byrow = TRUE, ncol=2))
grid.arrange(plot_list[[1]], plot_list[[2]],plot_list[[1]],plot_list[[1]],
plot_list[[5]],plot_list[[6]],plot_list[[7]],plot_list[[8]],
plot_list[[9]],plot_list[[10]],plot_list[[11]],plot_list[[12]],
plot_list[[13]], grob::null(),
layout_matrix = matrix(1:13, byrow = TRUE, ncol=2))
grid.arrange(plot_list[[1]], plot_list[[2]],plot_list[[1]],plot_list[[1]],
plot_list[[5]],plot_list[[6]],plot_list[[7]],plot_list[[8]],
plot_list[[9]],plot_list[[10]],plot_list[[11]],plot_list[[12]],
plot_list[[13]], empty_plot,
layout_matrix = matrix(1:14, byrow = TRUE, ncol=2))
empty_plot <- ggplot() + theme_void() + ggtitle("Empty Plot")
grid.arrange(plot_list[[1]], plot_list[[2]],plot_list[[1]],plot_list[[1]],
plot_list[[5]],plot_list[[6]],plot_list[[7]],plot_list[[8]],
plot_list[[9]],plot_list[[10]],plot_list[[11]],plot_list[[12]],
plot_list[[13]], empty_plot,
layout_matrix = matrix(1:14, byrow = TRUE, ncol=2))
# Create traceplots (not formally) on the proton data themselves
## Author: Alexander C. Murph
## Date: Jan 2024
library(reticulate)
library(changepoint)
library(ggplot2)
library(reshape2)
library(zoo)
library(ggExtra)
library(gridExtra)
library(grid)
library(tidyverse)
args <- commandArgs(trailingOnly = TRUE)
# Assign values
goes_date <- args[1]
#setwd(paste0('~/GitLab/vela-rampart/protons_to_neutrons/', goes_date, '/'))
# Specify the path to the pickle file/vast/home/murph/GitLab/vela-rampart/protons_to_neutrons/oct2024/data_logs
pickle_file <- paste0("~/GitLab/vela-rampart/protons_to_neutrons/", goes_date, "/data_logs/goes16_sgps_1minavg_", goes_date, "sep.csv")
proton_data <- as_tibble(read.csv(pickle_file))
source("~/Gitlab/bias_correction_functional_inputs/model/fit_model.R", echo=TRUE)
source("~/Gitlab/bias_correction_functional_inputs/model/fit_model.R", echo=TRUE)
